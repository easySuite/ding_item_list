<?php
/**
 * @file
 *
 * Module core file.
 */

// Item list cache validity period (seconds).
// When changing use default simple cache intervals only.
define('DING_ITEM_LIST_CACHE_TLL', 28800);

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_item_list_ctools_plugin_directory($module, $plugin) {
  // we'll be nice and limit scandir() calls
  if ($module == 'ctools' && $plugin == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_theme().
 */
function ding_item_list_theme($existing, $type, $theme, $path) {
  $hooks = array();

  $hooks['ding_item_list_list'] = array(
    'variables' => array(),
    'template' => 'ding-item-list_item-list',
    'path' => $path . '/templates',
  );

  $hooks['ding_item_list_item'] = array(
    'variables' => array(),
    'template' => 'ding-item-list_item',
    'path' => $path . '/templates',
  );

  return $hooks;
}

/**
 * Get ting objects.
 *
 * @param $query
 *   Search query string.
 * @param $count
 *   Number of objects to search.
 */
function ding_item_list_get_objects($query = '', $count = 0, $no_cover = FALSE, $sort = '') {
  $objects = array();
  $request = '(' . $query . ')';
  $page = 1;

  if (!empty($query) && !empty($count)) {
    module_load_include('client.inc', 'ting');
    // Search with portions of 10 items
    while ($result = ding_item_list_search_ting($request, $page++, 10, $sort)) {
      // This query is out of results OR we have needed amount of items
      if ($result->numTotalCollections == 0 || count($objects) == $count) {
        break;
      }

      foreach ($result->collections as $collection) {
        // Whether we reached our item limit per query.
        if (count($objects) == $count) {
          break 2; // stop fetching anything from Ting.
        }

        foreach ($collection->reply->objects as $searchItem) {
          // Check if covers service is alive and get cover details.
          if (!isset($covers_service_na)) {
            try {
              $cover_exists = ding_item_list_check_cover($searchItem->localId);
            }
            catch (AdditionalInformationServiceException $e) {
              // Service unavailable, do not ask for covers any more.
              $covers_service_na = TRUE;
            }

            // We can try to fetch next items and break here
            // ONLY if cover service is ok but returned no cover for current item.
            // Otherwise we will end up with eternal cycle.
            if (!$cover_exists && !$no_cover) {
              break;
            }
          }

          $item = new stdClass();
          $item->primary_object = $collection->primary_object;
          $item->id = $searchItem->id;
          $item->isbn = isset($searchItem->record['dc:identifier']['dkdcplus:ISBN']) ?
                        _ding_item_list_format_isbn($searchItem->record['dc:identifier']['dkdcplus:ISBN']) : NULL;
          $item->ac_source = isset($searchItem->record['ac:source'][''][0]) ?
                              $searchItem->record['ac:source'][''][0] : NULL;
          $item->dc_source = isset($searchItem->record['dc:source'][''][0]) ?
                              $searchItem->record['dc:source'][''][0] : NULL;
          $item->title = $searchItem->record['dc:title'][''][0];

          if (isset($searchItem->record['dc:creator'])) {
            if (isset($searchItem->record['dc:creator']['oss:aut'][0])) {
              $item->creator = $searchItem->record['dc:creator']['oss:aut'][0];
            }
            elseif (isset($searchItem->record['dc:creator']['oss:mus'][0])) {
              $item->creator = $searchItem->record['dc:creator']['oss:mus'][0];
            }
            elseif (isset($searchItem->record['dc:creator']['oss:sort'][0])) {
              $item->creator = $searchItem->record['dc:creator']['oss:sort'][0];
            }
            else {
              $item->creator = NULL;
            }
          }
          else {
            $item->creator = NULL;
          }

          if (isset($searchItem->record['dc:subject']['dkdcplus:DK5-Text'][0])) {
            $item->subject = $searchItem->record['dc:subject']['dkdcplus:DK5-Text'][0];
          }
          elseif (isset($searchItem->record['dc:subject']['oss:genre'][0])) {
            $item->subject = $searchItem->record['dc:subject']['oss:genre'][0];
          }
          elseif (isset($searchItem->record['dc:subject'][''][0])) {
            $item->subject = $searchItem->record['dc:subject'][''][0];
          }
          else {
            $item->subject = NULL;
          }

          // Set image filepath.
          // Image existence will be checked further.
          $item->image = ting_covers_object_path($searchItem->localId);

          if (isset($searchItem->record['dc:description'][''][0])) {
            $item->description = $searchItem->record['dc:description'][''][0];
          }
          elseif (isset($searchItem->record['dcterms:abstract'][''][0])) {
            $item->description = $searchItem->record['dcterms:abstract'][''][0];
          }
          elseif (isset($searchItem->record['dcterms:hasPart'])) {
            $item->description = $searchItem->record['dcterms:hasPart']['oss:track'];
          }
          else {
            $item->description = '';
          }

          $item->year = isset($searchItem->record['dc:date'][''][0]) ?
                          $searchItem->record['dc:date'][''][0] : NULL;
          // Default values
          $item->type = 1;
          $item->rating = 0;
          $item->rating_count = 0;
          $item->comment_count = 0;
          $item->has_rating = FALSE;

          $objects[$searchItem->localId] = $item;
          break;
        }
      }
    }

    // Make an array of local id's, fetchable by voxb.
    // Take only items with ISBN code.
    if (module_exists('ding_voxb')) {
      $local_ids = array();
      foreach ($objects as $local_id => $v) {
        if (!empty($v->isbn)) {
          $local_ids[$local_id] = $v->isbn[0];
        }
      }

      // Fetch details from voxb
      $voxb_details = new VoxbItems();
      $voxb_details->addReviewHandler('review', new VoxbReviews());
      $response = $voxb_details->fetchByISBN($local_ids);

      // Assign voxb details to items
      if ($response && $voxb_details->getCount() > 0) {
        foreach ($local_ids as $local_id => $isbn) {
          $detail = $voxb_details->getItem($isbn);
          if ($detail) {
            $objects[$local_id]->rating = (int) round($detail->getRating() / 20);
            $objects[$local_id]->rating_count = $detail->getRatingCount();
            $objects[$local_id]->comment_count = $detail->getReviews('review')->getCount();
            $objects[$local_id]->has_rating = TRUE;
          }
        }
      }
    }
  }
  return $objects;
}

/**
 * Perform ting search.
 *
 * @param $query
 *   Searched query string.
 * @param $page
 *   Requested results page.
 * @param $records
 *   Number of records to fetch.
 * @return
 *   Ting search result object.
 */
function ding_item_list_search_ting($query = '', $page = 1, $records = 10, $sort = '') {
  if (!empty($query)) {
    $query = '(' . $query . ')';

    $options = array(
      'allObjects' => FALSE,
      'enrich' => TRUE,
      'sort' => $sort,
    );

    $search_result = ting_do_search($query, $page, $records, $options);

    return $search_result;
  }

  return FALSE;
}

/**
 * Check for cover existence.
 *
 * @param $local_id
 *   Ting item local id.
 * @return
 *   TRUE if item has a cover, FALSE otherwise.
 */
function ding_item_list_check_cover($local_id, $style = 'ding_item_list') {
  module_load_include('pages.inc', 'ting_covers');
  $covers = ting_covers_objects(FALSE, array($local_id => array('local_id' => $local_id, 'image_style' => $style)));

  if (!empty($covers[$local_id]) > 0) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Create missed covers.
 *
 * @param $items
 *   Set of ting objects.
 */
function ding_item_list_create_missed_covers(&$items) {
  foreach ($items as $item_id => $item) {
    $filepath = drupal_realpath($item->image);
    if (!file_exists($filepath)) {
      $missing_images_ids[] = $item_id;
    }
  }

  if (!empty($missing_images_ids)) {
    ding_item_list_get_images_from_addi($items, $missing_images_ids);
  }
}

/**
 * Get images from ADDI web-service.
 *
 * @param $items
 *   Set of ting objects.
 * @param $missing_images_local_ids
 *   Array of ting items id's with missing covers.
 * @return
 *   Set of ting objects, with image path attached.
 */
function ding_item_list_get_images_from_addi(&$items, $missing_images_local_ids) {
  require_once drupal_get_path('module', 'ting_covers') . '/ting_covers.pages.inc';
  $service = new AdditionalInformationService(variable_get('addi_wsdl_url'), variable_get('addi_username'), variable_get('addi_group'), variable_get('addi_password'));

  try {
    // Local ids = Faust numbers. Library object identifiers can be confusing...
    $additional_informations = $service->getByFaustNumber($missing_images_local_ids);
  }
  catch (Exception $e) {
    return;
  }

  foreach ($missing_images_local_ids as $local_id) {
    // Try to extract the image url from the result
    $source_url = FALSE;
    if (isset($additional_informations[$local_id]) && $ai = $additional_informations[$local_id]) {
      if ($ai->detailUrl) {
        $source_url = $ai->detailUrl;
      }
      elseif ($ai->thumbnailUrl) {
        $source_url = $ai->thumbnailUrl;
      }
    }

    // Try to download the image locally
    $file = _ting_covers_pages_fetch_image(ting_covers_object_path($local_id), $source_url);

    if ($file) {
      //Generate a path corresponding to the downloaded image, styled
      $items[$local_id]->image = $file;
    }
    else {
      // @todo
      // Some default image perhaps.
      $items[$local_id]->image = '';
    }
  }
}

/**
 * Generate a cache id, based on a keyword.
 *
 * @param $keyword
 *   A generic keyword.
 * @return
 *   Hash string, meaning a certain cache id.
 */
function ding_item_list_generate_cache_id($keyword) {
  return 'ding_item_list-' . md5($keyword);
}

/**
 * Implements hook_ding_item_cache().
 */
function ding_item_list_ding_item_cache() {
  return array(
    'ding_item_list' => t('Ding item list'),
  );
}

/**
 * Format ISBN number.
 * Remove all spaces and dashes.
 * @param string $isbn
 *   Unformated ISBN number.
 *
 * @return string
 *   Formated ISBN number.
 */
function _ding_item_list_format_isbn($isbn) {
  foreach ($isbn as $k => $number) {
    $isbn[$k] = str_replace(array(' ', '-'), '', $number);
  }
  rsort($isbn);
  return $isbn;
}
