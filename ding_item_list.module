<?php
/**
 * @file
 * Module core file.
 */

// Item list cache validity period (seconds).
// When changing use default simple cache intervals only.
define('DING_ITEM_LIST_CACHE_TLL', 28800);


/**
 * Implements hook_menu().
 */
function ding_item_list_menu() {
  $items = array();
  $items['ding_item_list'] = array(
    'title' => 'Get items for list',
    'page callback' => 'get_item_list_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/ding/ding_item_list'] = array(
    'title' => 'Ding Item List',
    'description' => 'Configure ding item list',
    'weight' => -20,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_item_list_settings_form'),
    'access arguments' => array('administer ding settings'),
    'file' => 'ding_item_list.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_item_list_ctools_plugin_directory($module, $plugin) {
  // We'll be nice and limit scandir() calls.
  if ($module == 'ctools' && $plugin == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_theme().
 */
function ding_item_list_theme($existing, $type, $theme, $path) {
  drupal_add_css($path . '/css/ding_item_list.css', array('type' => 'file'));

  $hooks = array();
  $hooks['ding_item_list_list'] = array(
    'variables' => array(),
    'template' => 'ding-item-list_item-list',
    'path' => $path . '/templates',
  );

  $hooks['ding_item_list_item'] = array(
    'variables' => array(),
    'template' => 'ding-item-list_item',
    'path' => $path . '/templates',
  );

  $hooks['ding_item_list_item_table'] = array(
    'variables' => array(),
    'template' => 'ding-item-list_item-table',
    'path' => $path . '/templates',
  );

  return $hooks;
}

/**
 * Pass ajax loaded items to the list wrapper.
 */
function get_item_list_ajax() {
  if (!empty($_GET['content']) && count($_GET['content']) > 2) {
    list($item_query, $item_count, $item_sort, $no_covers) = array_values($_GET['content']);
    $markup = ding_item_list_get_content($item_query, (int) $item_count, $item_sort, $no_covers);
  }
  else {
    $markup = '';
    watchdog('ding_item_list', t('Wrong parameters are passed from the query'));
  }
  $content = theme('ding_item_list_list', array('items' => $markup));

  drupal_json_output($content);
}

/**
 * Generate a cache id, based on a keyword.
 *
 * @param string $keyword
 *   A generic keyword.
 *
 * @return string
 *   Hash string, meaning a certain cache id.
 */
function ding_item_list_generate_cache_id($keyword) {
  return 'ding_item_list-' . md5($keyword);
}

/**
 * Implements hook_ding_item_cache().
 */
function ding_item_list_ding_item_cache() {
  return array(
    'ding_item_list' => t('Ding item list'),
  );
}

/**
 * Add search parameters fields to existing form.
 *
 * @param array $form
 *   Form to be modified with new fields.
 * @param array $default
 *   Default values for form fields, if any.
 */
function ding_item_list_search_form(&$form, $default = array()) {
  $form['plugin_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('List settings'),
  );

  $form['plugin_settings']['item_query'] = array(
    '#type' => 'textfield',
    '#title' => t('Ting query string'),
    '#default_value' => isset($default['item_query']) ? $default['item_query'] : '',
    '#required' => TRUE,
    '#maxlength' => 255,
  );

  $form['plugin_settings']['no_covers'] = [
    '#type' => 'checkbox',
    '#title' => t('Allow no-covers'),
    '#description' => t('When checked, all matched materials will be shown.'),
    '#default_value' => $default['no_covers'] ?? NULL,
  ];

  $form['plugin_settings']['item_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Items count'),
    '#default_value' => isset($default['item_count']) ? $default['item_count'] : 3,
    '#required' => TRUE,
    '#size' => 3,
    '#element_validate' => array('element_validate_integer_positive'),
  );

  $form['plugin_settings']['item_sort'] = array(
    '#type' => 'select',
    '#title' => t('Sorting'),
    '#options' => array(
      '' => t('- None -'),
      'title_ascending' => t('Title (Ascending)'),
      'title_descending' => t('Title (Descending)'),
      'creator_ascending' => t('Creator (Ascending)'),
      'creator_descending' => t('Creator (Descending)'),
      'date_ascending' => t('Date (Ascending)'),
      'date_descending' => t('Date (Descending)'),
      'acquisitionDate_ascending' => t('Acquisition date (Ascending)'),
      'acquisitionDate_descending' => t('Acquisition date (Descending)'),
    ),
    '#default_value' => isset($default['item_sort']) ? $default['item_sort'] : '',
    '#description' => t('If not set, defaults to Ranking'),
  );
}

/**
 * Generate markup according to passed search parameters.
 *
 * @param string $query
 *   Search query.
 * @param int $count
 *   Number of items to fetch.
 * @param string $sort
 *   Sort identifier
 *
 * @return string
 *   List markup.
 */
function ding_item_list_get_content($query, $count, $sort, $covers) {
  $cid = ding_item_list_generate_cache_id($query . $count . $sort);
  $cache = cache_get($cid);

  if (!$cache || empty($cache->data)) {
    $objects = _ding_item_list_get_items_with_covers($query, $count, $sort, $covers);

    cache_set($cid, $objects, 'cache', $_SERVER['REQUEST_TIME'] + DING_ITEM_LIST_CACHE_TLL);
  }
  else {
    $objects = $cache->data;
  }

  $buttons_modules = variable_get('ding_item_list_button_modules', []);
  $allowed_buttons = array_filter($buttons_modules);

  $markup = '';
  foreach ($objects as $object) {
    $loan_form = ding_item_list_module_invoke_all('ding_entity_buttons', 'ding_entity', $object, 'ajax', 'ajax');

    foreach ($loan_form as $key => $item) {
      if (!in_array($item['module'], $allowed_buttons)) {
        unset($loan_form[$key]);
      }
    }

    $cover = ting_covers_object_path($object->getId());
    $rating = field_view_field('ting_object', $object, "ding_entity_rating_action", [
      'label' => 'hidden',
      'type' => 'ding_entity_rating_action_default',
    ]);
    $creators = $object->getCreators();

    $markup .= theme('ding_item_list_item', array(
      'faust' => $object->getId(),
      'cover' => (!empty($cover) && file_exists($cover)) ? image_style_url('ding_item_list', $cover) : '/' . drupal_get_path('module', 'ding_item_list') . '/images/no-image-minil.png',
      'title' => $object->getTitle(),
      'author' => reset($creators),
      'year' => $object->getDate(),
      'rating' => drupal_render($rating),
      'loan_form' => drupal_render($loan_form),
      )
    );
  }

  return $markup;
}

/**
 * Get ting entities search result.
 */
function _ding_item_list_get_objects($query = '', $sort = '') {
  $entities = [];
  $request = ting_start_query()
    ->withRawQuery($query)
    ->withCount(50)
    ->withSort($sort);
  $results = $request->execute();

  $collections = $results->getTingEntityCollections();
  foreach ($collections as $collection) {
    foreach ($collection->getEntities() as $entity) {
      $entity_id = $entity->getId();
      $entities[$entity_id] = ding_entity_load($entity_id, 'ting_object');
    }
  }

  return $entities;
}

/**
 * Select only images with covers.
 */
function _ding_item_list_get_items_with_covers($query, $count, $sort, $no_covers = NULL) {
  $entities_found_with_covers = array();
  $objects = _ding_item_list_get_objects($query, $sort);
  $covers = ting_covers_get(array_keys($objects));

  if (empty($no_covers)) {
    foreach ($covers as $id => $path) {
      $entities_found_with_covers[$id] = $objects[$id];
    }
  }

  $entities_found = empty($no_covers) ? $entities_found_with_covers : $objects;

  return array_splice($entities_found, 0, $count);
}

/**
 * Add task to cron.
 *
 * @param string $key
 *   Cache key.
 * @param string $function
 *   Function to execute.
 * @param array $args
 *   Arguments passed to callback.
 */
function _ding_item_list_cronapi_task($key, $function, array $args) {
  $cache_key = 'ding_item_list_cronapi_task';
  $cache = cache_get($cache_key, 'cache');
  $cache = $cache ? $cache : (object) array('data' => array());
  $cache->data[$key] = array('callback' => $function, 'args' => $args);
  cache_set($cache_key, $cache->data, 'cache', CACHE_TEMPORARY);
}

/**
 * Implements hook_cronapi().
 */
function ding_item_list_cronapi($op, $function = NULL) {
  switch ($op) {
    case 'list':
      return array('ding_item_list_warm_cache' => t('Cache warmer'));

    break;

    case 'rule':
      switch ($function) {
        case 'ding_item_list_warm_cache':
          return "* 3 * * *";
      }
      break;

    case 'execute':
      switch ($function) {
        case 'ding_item_list_warm_cache':
          module_load_include('inc', 'ding_item_list', 'plugins/content_types/ding_item_list');
          // Clear cache.
          cache_clear_all('ding_item_list', 'cache', TRUE);

          // Rebuild cache by executing existing callbacks.
          $cache = cache_get('ding_item_list_cronapi_task');
          if ($cache !== FALSE) {
            foreach ($cache->data as $item) {
              call_user_func_array($item['callback'], $item['args']);
            }
          }

          // Clear tasks.
          cache_clear_all('ding_item_list_cronapi_task', 'cache', TRUE);
          break;
      }
      break;
  }
}

/**
 * Plugin edit form.
 */
function ding_item_list_plugin_edit_form($form, &$form_state) {
  $conf = $form_state['conf'];

  // Use specific title handling - hide pane title if no content is present.
  // Standard pane title handling does not provide such functionality,
  // so use custom title field and hide the standard ones.
  unset($form['override_title']);
  unset($form['override_title_text']);
  unset($form['override_title_markup']);

  $form['item_list_item_list_custom_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Pane title'),
    '#default_value' => t(isset($conf['item_list_item_list_custom_title']) ? $conf['item_list_item_list_custom_title'] : 'Related materials'),
  );

  ding_item_list_search_form($form, $conf);

  return $form;
}

/**
 * Plugin edit form submit handler.
 *
 * Saves the data from the form.
 */
function ding_item_list_plugin_edit_form_submit($form, &$form_state) {
  $form_state['conf']['item_list_item_list_custom_title'] = $form_state['values']['item_list_item_list_custom_title'];
  $form_state['conf']['item_query'] = $form_state['input']['item_query'];
  $form_state['conf']['no_covers'] = empty($form_state['input']['no_covers']) ? 0 : 1;
  $form_state['conf']['item_count'] = $form_state['input']['item_count'];
  $form_state['conf']['item_sort'] = $form_state['input']['item_sort'];

  // Clear cache when saving settings.
  $cid = ding_item_list_generate_cache_id($form_state['conf']['item_query']);
  cache_clear_all($cid, 'cache');
}

/**
 * Overriding core "module_invoke_all" function.
 *
 * @param $hook
 *   The name of the hook to invoke.
 *
 * @return array
 *
 * @see module_invoke_all()
 */
function ding_item_list_module_invoke_all($hook) {
  $args = func_get_args();
  // Remove $hook from the arguments.
  unset($args[0]);
  $return = array();
  foreach (module_implements($hook) as $key => $module) {
    $function = $module . '_' . $hook;
    if (function_exists($function)) {
      $result = call_user_func_array($function, $args);

      if (isset($result) && is_array($result)) {
        if (!empty($result)) {
          $result[0]['module'] = $module;
        }
        $return = array_merge_recursive($return, $result);
      }
    }
  }

  return $return;
}
